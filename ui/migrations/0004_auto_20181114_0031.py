# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-11-14 05:19
from __future__ import unicode_literals

from os import makedirs, path
from tempfile import gettempdir
from shutil import copy, copytree

from django.conf import settings
from django.core.files import File
from django.db import migrations

MEDIA_AUDIO = ('audio', 'm4a')
MEDIA_IMAGE = ('images', 'jpg')
MEDIA_TYPES = [MEDIA_AUDIO, MEDIA_IMAGE]
ORIGIN_DIR = 'originals'
ORIGIN_ROOT = path.join(settings.MEDIA_ROOT, ORIGIN_DIR)
PICTOGRAMS = ['a', 'and', 'are', 'color', 'come', 'dont', 'drink', 'eat', 'feel', 'go', 'have', 'he', 'help', 'i',
              'is', 'it', 'like', 'make', 'more', 'my', 'need', 'play', 'please', 'put', 'read', 'say', 'she', 'stop',
              'that', 'there', 'they', 'turn', 'want', 'was', 'we', 'were', 'what', 'work', 'you']


def seed_pictograms(apps, schema_editor):
    """
    Seed the database with a default set of pictograms.

    Create the destination media directories (/media/audio, /media/images) if
    they don't already exist. Then, for each pictogram text, find the
    associated audio and image files, and use all three to create a Pictogram
    model instance. Before saving the Pictogram, copy it's files from the origin
    to the proper location.
    """
    for directory, _ in MEDIA_TYPES:
        destination_path = path.join(settings.MEDIA_ROOT, directory)
        if not path.exists(destination_path):
            makedirs(destination_path)

    def get_media_file(root, file_base, directory, extension):
        """
        Construct a file path, open the file, and return a File handle.
        """
        file_name = f'{file_base}.{extension}'
        file_path = path.join(root, directory, file_name)
        return File(open(file_path, 'rb'))

    def copy_files_to_destination(files, destination_root):
        """
        "Copy" the pictogram files by resetting the files' `name` property.

        Remove the ORIGIN_DIR from the file's path to place them in the
        MEDIA_ROOT.
        """
        for media_file in files:
            media_file.name = path.normpath(media_file.name.replace(ORIGIN_DIR, ''))

    Pictogram = apps.get_model('ui', 'Pictogram')
    for pictogram_text in PICTOGRAMS:
        audio_file = get_media_file(ORIGIN_ROOT, pictogram_text, *MEDIA_AUDIO)
        image_file = get_media_file(ORIGIN_ROOT, pictogram_text, *MEDIA_IMAGE)
        pictogram = Pictogram(audio=audio_file, image=image_file, text=pictogram_text)
        copy_files_to_destination([pictogram.audio, pictogram.image], settings.MEDIA_ROOT)
        pictogram.save()


def delete_pictograms(apps, schema_editor):
    """
    Remove each pictogram record from the database and delete associated files.
    """
    Pictogram = apps.get_model('ui', 'Pictogram')
    for pictogram in Pictogram.objects.filter(text__in=PICTOGRAMS):
        pictogram.audio.delete()
        pictogram.image.delete()
        pictogram.delete()


class Migration(migrations.Migration):
    dependencies = [
        ('ui', '0003_pictogram'),
    ]
    operations = [
        migrations.RunPython(seed_pictograms, delete_pictograms)
    ]
